@page "/tasker"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JS

<div class="d-flex align-items-center justify-content-center">
	<div class=" task p-5">
		<div class="p-2 text-center mb-3">
			<img src="/img/tasker_600.png" width="300" />
		</div>
		<div>
			<EditForm Model="item" OnValidSubmit="AddTaskAsync">
				<DataAnnotationsValidator />
				<div class="d-flex flex-row gap-2">
					<InputText class="form-control" placeholder="Enter a task" @bind-Value="item.Name" />
					<button type="submit" class="btn btn-primary">Add</button>
				</div>
				<div>
					<ValidationMessage For="() => item.Name" />
				</div>
			</EditForm>
		</div>
		<hr />
		<div class="vstack">
			@foreach (var item in taskerItems)
			{
				<TaskerLine Item="item" OnDeleteCallBack="DeleteTask" />
			}
		</div>
	</div>
</div>

@code {
	private TaskerItem item = new();
	private List<TaskerItem> taskerItems = new();

	// Overridden as we want to get list after everything has loaded on the page
	protected override async Task OnInitializedAsync()
	{
		await LoadListAsync();
	}

	private async Task AddTaskAsync()
	{
		item.Id = Guid.NewGuid();
		taskerItems.Add(item);
		item = new();

		await SaveListAsync();
	}

	/// <summary>
	/// Event callback function to delete a task from the child component
	/// </summary>
	/// <param name="item"></param>
	private void DeleteTask(TaskerItem item)
	{
		taskerItems.Remove(item);
	}

	private void UpdateTask(TaskerItem item)
	{
		// TODO: Save to local storage
	}

	private async Task SaveListAsync()
	{
		string? taskerItemsJson = JsonSerializer.Serialize(taskerItems);

		await JS.InvokeVoidAsync("localStorage.setItem", "TaskerList", taskerItemsJson);
	}

	private async Task LoadListAsync()
	{
		try
		{
			// getItem returns a JSON list
			string taskerItemsJson = await JS.InvokeAsync<string>("localStorage.getItem", "TaskerList") ?? "[]"; // if null, empty string of an array
			taskerItems = JsonSerializer.Deserialize<List<TaskerItem>>(taskerItemsJson);
		}
		catch (Exception ex)
		{
			taskerItems = new();
			await SaveListAsync();
		}
	}
}
